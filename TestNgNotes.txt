TestNG Notes:
It is annotation based framework
@Test is main annotation which makes our method as test.
It gives us additional features such as priorities of test cases, parameters, reports etc.

Annotations:
@Test - we write every function with this annotation for execution in testng
@BeforeMethod - we use this annotation for pre conditions which executes before every function
@AfterMethod -  we use this annotation for post conditions which executes after every function
@BeforeClass - we use this annotation for the condition we want to execute in the beginning of class
@AfterClass -  we use this annotation for the condition we want to execute in the end of class


TestNG - TestNG is annotation based tool/framework

@Test -  it takes our function/method as a test
Testng has annotations for precondition and for post condition

Testng has annotation @Before for all the precondition (@BeforeMethod, @BeforeClass)

Testng has annotation @After for all the post condition (@AfterMethod, @AfterClass)


TC 2: HRMS Application Negative Login:

Open chrome browser
Go to http://hrmstest.syntaxtechs.net/humanresources/symfony/web/index.php/auth/login
Enter valid username
Leave password field empty
Verify error message with text “Password cannot be empty” is displayed.

priority and enable/disable attributes
Open chrome browser
Go to http://hrmstest.syntaxtechs.net/humanresources/symfony/web/index.php/auth/login
Enter valid username
Enter valid password
verify welcome message via hard assertion

Hard assertions - hard assertions stop your overall execution when they fail and throw an exception
Soft assertions - soft assertions allow you to execute your complete code and in the end they provide consolidated
report of all the failed assertions

TestNG.xml file -


Assertions -
Hard assertion - if assertions found an error, our code stucks there and it will not execute
the remaining code

Soft assertion  -  it allows us to execute our entire code and gives result of all the failures in
the end of the execution.

we use assertAll() to collect all the failures in the end.


Enable and Disable -
priotity
depends on

testng.xml -

method wise execution and configuration of testng.xml file
class wise execution and configuration
package wise execution and configuration



alwaysrun
emailable report - listener
data provider

Testng.xml configuration
alwaysrun
grouping

data provider -

javascript executor

listeners - this is a feature that tracks any activity which is happening during the execution of my test
test pass
test fail
test start
test skipped
test finish

parallel testing

config
utils
commonmethods































